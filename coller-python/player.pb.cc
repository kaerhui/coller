// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#include "player.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_player_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Chess_player_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_player_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position_player_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_player_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ChessPosition_player_2eproto;
namespace com {
namespace oppo {
namespace ohacker {
namespace player {
class InitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitRequest> _instance;
} _InitRequest_default_instance_;
class ChessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chess> _instance;
} _Chess_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class ChessPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChessPosition> _instance;
} _ChessPosition_default_instance_;
class MoveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MoveRequest> _instance;
} _MoveRequest_default_instance_;
class InitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<InitResponse> _instance;
} _InitResponse_default_instance_;
class MoveResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MoveResponse> _instance;
} _MoveResponse_default_instance_;
}  // namespace player
}  // namespace ohacker
}  // namespace oppo
}  // namespace com
static void InitDefaultsInitRequest_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::oppo::ohacker::player::_InitRequest_default_instance_;
    new (ptr) ::com::oppo::ohacker::player::InitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::oppo::ohacker::player::InitRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_InitRequest_player_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsInitRequest_player_2eproto}, {}};

static void InitDefaultsChess_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::oppo::ohacker::player::_Chess_default_instance_;
    new (ptr) ::com::oppo::ohacker::player::Chess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::oppo::ohacker::player::Chess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Chess_player_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsChess_player_2eproto}, {}};

static void InitDefaultsPosition_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::oppo::ohacker::player::_Position_default_instance_;
    new (ptr) ::com::oppo::ohacker::player::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::oppo::ohacker::player::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position_player_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition_player_2eproto}, {}};

static void InitDefaultsChessPosition_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::oppo::ohacker::player::_ChessPosition_default_instance_;
    new (ptr) ::com::oppo::ohacker::player::ChessPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::oppo::ohacker::player::ChessPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ChessPosition_player_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsChessPosition_player_2eproto}, {
      &scc_info_Position_player_2eproto.base,
      &scc_info_Chess_player_2eproto.base,}};

static void InitDefaultsMoveRequest_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::oppo::ohacker::player::_MoveRequest_default_instance_;
    new (ptr) ::com::oppo::ohacker::player::MoveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::oppo::ohacker::player::MoveRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MoveRequest_player_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMoveRequest_player_2eproto}, {
      &scc_info_ChessPosition_player_2eproto.base,}};

static void InitDefaultsInitResponse_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::oppo::ohacker::player::_InitResponse_default_instance_;
    new (ptr) ::com::oppo::ohacker::player::InitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::oppo::ohacker::player::InitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_InitResponse_player_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsInitResponse_player_2eproto}, {
      &scc_info_ChessPosition_player_2eproto.base,}};

static void InitDefaultsMoveResponse_player_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::oppo::ohacker::player::_MoveResponse_default_instance_;
    new (ptr) ::com::oppo::ohacker::player::MoveResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::oppo::ohacker::player::MoveResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MoveResponse_player_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMoveResponse_player_2eproto}, {
      &scc_info_Position_player_2eproto.base,}};

void InitDefaults_player_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_InitRequest_player_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Chess_player_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Position_player_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChessPosition_player_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MoveRequest_player_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_InitResponse_player_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MoveResponse_player_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_player_2eproto[7];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_player_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_player_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_player_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::InitRequest, isfirsthand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::Chess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::Chess, chessid_),
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::Chess, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::Position, x_),
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::Position, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::ChessPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::ChessPosition, position_),
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::ChessPosition, chess_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::MoveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::MoveRequest, chesspositions_),
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::MoveRequest, isfirsthand_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::InitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::InitResponse, chessposition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::MoveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::player::MoveResponse, position_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::oppo::ohacker::player::InitRequest)},
  { 6, -1, sizeof(::com::oppo::ohacker::player::Chess)},
  { 13, -1, sizeof(::com::oppo::ohacker::player::Position)},
  { 20, -1, sizeof(::com::oppo::ohacker::player::ChessPosition)},
  { 27, -1, sizeof(::com::oppo::ohacker::player::MoveRequest)},
  { 34, -1, sizeof(::com::oppo::ohacker::player::InitResponse)},
  { 40, -1, sizeof(::com::oppo::ohacker::player::MoveResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::oppo::ohacker::player::_InitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::oppo::ohacker::player::_Chess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::oppo::ohacker::player::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::oppo::ohacker::player::_ChessPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::oppo::ohacker::player::_MoveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::oppo::ohacker::player::_InitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::oppo::ohacker::player::_MoveResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_player_2eproto = {
  {}, AddDescriptors_player_2eproto, "player.proto", schemas,
  file_default_instances, TableStruct_player_2eproto::offsets,
  file_level_metadata_player_2eproto, 7, file_level_enum_descriptors_player_2eproto, file_level_service_descriptors_player_2eproto,
};

const char descriptor_table_protodef_player_2eproto[] =
  "\n\014player.proto\022\027com.oppo.ohacker.player\""
  "\"\n\013InitRequest\022\023\n\013isFirstHand\030\001 \001(\010\"\'\n\005C"
  "hess\022\017\n\007chessId\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\" \n\010"
  "Position\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"s\n\rChessP"
  "osition\0223\n\010position\030\001 \001(\0132!.com.oppo.oha"
  "cker.player.Position\022-\n\005chess\030\002 \001(\0132\036.co"
  "m.oppo.ohacker.player.Chess\"b\n\013MoveReque"
  "st\022>\n\016chessPositions\030\001 \003(\0132&.com.oppo.oh"
  "acker.player.ChessPosition\022\023\n\013isFirstHan"
  "d\030\002 \001(\010\"M\n\014InitResponse\022=\n\rchessPosition"
  "\030\001 \003(\0132&.com.oppo.ohacker.player.ChessPo"
  "sition\"C\n\014MoveResponse\0223\n\010position\030\001 \003(\013"
  "2!.com.oppo.ohacker.player.Position2\307\001\n\r"
  "PlayerService\022_\n\016initChessBoard\022$.com.op"
  "po.ohacker.player.InitRequest\032%.com.oppo"
  ".ohacker.player.InitResponse\"\000\022U\n\004move\022$"
  ".com.oppo.ohacker.player.MoveRequest\032%.c"
  "om.oppo.ohacker.player.MoveResponse\"\000B\002P"
  "\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_player_2eproto = {
  false, InitDefaults_player_2eproto, 
  descriptor_table_protodef_player_2eproto,
  "player.proto", &assign_descriptors_table_player_2eproto, 729,
};

void AddDescriptors_player_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_player_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_player_2eproto = []() { AddDescriptors_player_2eproto(); return true; }();
namespace com {
namespace oppo {
namespace ohacker {
namespace player {

// ===================================================================

void InitRequest::InitAsDefaultInstance() {
}
class InitRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRequest::kIsFirstHandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRequest::InitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.oppo.ohacker.player.InitRequest)
}
InitRequest::InitRequest(const InitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isfirsthand_ = from.isfirsthand_;
  // @@protoc_insertion_point(copy_constructor:com.oppo.ohacker.player.InitRequest)
}

void InitRequest::SharedCtor() {
  isfirsthand_ = false;
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:com.oppo.ohacker.player.InitRequest)
  SharedDtor();
}

void InitRequest::SharedDtor() {
}

void InitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitRequest& InitRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InitRequest_player_2eproto.base);
  return *internal_default_instance();
}


void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.oppo.ohacker.player.InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isfirsthand_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InitRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool isFirstHand = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_isfirsthand(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.oppo.ohacker.player.InitRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isFirstHand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirsthand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.oppo.ohacker.player.InitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.oppo.ohacker.player.InitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.oppo.ohacker.player.InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isFirstHand = 1;
  if (this->isfirsthand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isfirsthand(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.oppo.ohacker.player.InitRequest)
}

::google::protobuf::uint8* InitRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.oppo.ohacker.player.InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isFirstHand = 1;
  if (this->isfirsthand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isfirsthand(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.oppo.ohacker.player.InitRequest)
  return target;
}

size_t InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.oppo.ohacker.player.InitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isFirstHand = 1;
  if (this->isfirsthand() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.oppo.ohacker.player.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRequest* source =
      ::google::protobuf::DynamicCastToGenerated<InitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.oppo.ohacker.player.InitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.oppo.ohacker.player.InitRequest)
    MergeFrom(*source);
  }
}

void InitRequest::MergeFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.oppo.ohacker.player.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isfirsthand() != 0) {
    set_isfirsthand(from.isfirsthand());
  }
}

void InitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.oppo.ohacker.player.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.oppo.ohacker.player.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  return true;
}

void InitRequest::Swap(InitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRequest::InternalSwap(InitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isfirsthand_, other->isfirsthand_);
}

::google::protobuf::Metadata InitRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_player_2eproto);
  return ::file_level_metadata_player_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Chess::InitAsDefaultInstance() {
}
class Chess::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chess::kChessIdFieldNumber;
const int Chess::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chess::Chess()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.oppo.ohacker.player.Chess)
}
Chess::Chess(const Chess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chessid_, &from.chessid_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&chessid_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:com.oppo.ohacker.player.Chess)
}

void Chess::SharedCtor() {
  ::memset(&chessid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&chessid_)) + sizeof(value_));
}

Chess::~Chess() {
  // @@protoc_insertion_point(destructor:com.oppo.ohacker.player.Chess)
  SharedDtor();
}

void Chess::SharedDtor() {
}

void Chess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chess& Chess::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Chess_player_2eproto.base);
  return *internal_default_instance();
}


void Chess::Clear() {
// @@protoc_insertion_point(message_clear_start:com.oppo.ohacker.player.Chess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chessid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&chessid_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Chess::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Chess*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 chessId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_chessid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Chess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.oppo.ohacker.player.Chess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 chessId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chessid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.oppo.ohacker.player.Chess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.oppo.ohacker.player.Chess)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Chess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.oppo.ohacker.player.Chess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chessId = 1;
  if (this->chessid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chessid(), output);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.oppo.ohacker.player.Chess)
}

::google::protobuf::uint8* Chess::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.oppo.ohacker.player.Chess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chessId = 1;
  if (this->chessid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chessid(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.oppo.ohacker.player.Chess)
  return target;
}

size_t Chess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.oppo.ohacker.player.Chess)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 chessId = 1;
  if (this->chessid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chessid());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.oppo.ohacker.player.Chess)
  GOOGLE_DCHECK_NE(&from, this);
  const Chess* source =
      ::google::protobuf::DynamicCastToGenerated<Chess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.oppo.ohacker.player.Chess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.oppo.ohacker.player.Chess)
    MergeFrom(*source);
  }
}

void Chess::MergeFrom(const Chess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.oppo.ohacker.player.Chess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chessid() != 0) {
    set_chessid(from.chessid());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Chess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.oppo.ohacker.player.Chess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chess::CopyFrom(const Chess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.oppo.ohacker.player.Chess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chess::IsInitialized() const {
  return true;
}

void Chess::Swap(Chess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chess::InternalSwap(Chess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chessid_, other->chessid_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata Chess::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_player_2eproto);
  return ::file_level_metadata_player_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.oppo.ohacker.player.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:com.oppo.ohacker.player.Position)
}

void Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:com.oppo.ohacker.player.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Position_player_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:com.oppo.ohacker.player.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Position*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_x(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 y = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_y(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.oppo.ohacker.player.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.oppo.ohacker.player.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.oppo.ohacker.player.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.oppo.ohacker.player.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.oppo.ohacker.player.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.oppo.ohacker.player.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.oppo.ohacker.player.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.oppo.ohacker.player.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.oppo.ohacker.player.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.oppo.ohacker.player.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.oppo.ohacker.player.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.oppo.ohacker.player.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.oppo.ohacker.player.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.oppo.ohacker.player.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_player_2eproto);
  return ::file_level_metadata_player_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ChessPosition::InitAsDefaultInstance() {
  ::com::oppo::ohacker::player::_ChessPosition_default_instance_._instance.get_mutable()->position_ = const_cast< ::com::oppo::ohacker::player::Position*>(
      ::com::oppo::ohacker::player::Position::internal_default_instance());
  ::com::oppo::ohacker::player::_ChessPosition_default_instance_._instance.get_mutable()->chess_ = const_cast< ::com::oppo::ohacker::player::Chess*>(
      ::com::oppo::ohacker::player::Chess::internal_default_instance());
}
class ChessPosition::HasBitSetters {
 public:
  static const ::com::oppo::ohacker::player::Position& position(const ChessPosition* msg);
  static const ::com::oppo::ohacker::player::Chess& chess(const ChessPosition* msg);
};

const ::com::oppo::ohacker::player::Position&
ChessPosition::HasBitSetters::position(const ChessPosition* msg) {
  return *msg->position_;
}
const ::com::oppo::ohacker::player::Chess&
ChessPosition::HasBitSetters::chess(const ChessPosition* msg) {
  return *msg->chess_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChessPosition::kPositionFieldNumber;
const int ChessPosition::kChessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChessPosition::ChessPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.oppo.ohacker.player.ChessPosition)
}
ChessPosition::ChessPosition(const ChessPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::com::oppo::ohacker::player::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_chess()) {
    chess_ = new ::com::oppo::ohacker::player::Chess(*from.chess_);
  } else {
    chess_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.oppo.ohacker.player.ChessPosition)
}

void ChessPosition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ChessPosition_player_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chess_) -
      reinterpret_cast<char*>(&position_)) + sizeof(chess_));
}

ChessPosition::~ChessPosition() {
  // @@protoc_insertion_point(destructor:com.oppo.ohacker.player.ChessPosition)
  SharedDtor();
}

void ChessPosition::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete chess_;
}

void ChessPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChessPosition& ChessPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ChessPosition_player_2eproto.base);
  return *internal_default_instance();
}


void ChessPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:com.oppo.ohacker.player.ChessPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && chess_ != nullptr) {
    delete chess_;
  }
  chess_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChessPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ChessPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .com.oppo.ohacker.player.Position position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::oppo::ohacker::player::Position::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // .com.oppo.ohacker.player.Chess chess = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::com::oppo::ohacker::player::Chess::_InternalParse;
        object = msg->mutable_chess();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChessPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.oppo.ohacker.player.ChessPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .com.oppo.ohacker.player.Position position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .com.oppo.ohacker.player.Chess chess = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_chess()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.oppo.ohacker.player.ChessPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.oppo.ohacker.player.ChessPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChessPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.oppo.ohacker.player.ChessPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.oppo.ohacker.player.Position position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::position(this), output);
  }

  // .com.oppo.ohacker.player.Chess chess = 2;
  if (this->has_chess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::chess(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.oppo.ohacker.player.ChessPosition)
}

::google::protobuf::uint8* ChessPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.oppo.ohacker.player.ChessPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.oppo.ohacker.player.Position position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::position(this), target);
  }

  // .com.oppo.ohacker.player.Chess chess = 2;
  if (this->has_chess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::chess(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.oppo.ohacker.player.ChessPosition)
  return target;
}

size_t ChessPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.oppo.ohacker.player.ChessPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.oppo.ohacker.player.Position position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .com.oppo.ohacker.player.Chess chess = 2;
  if (this->has_chess()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *chess_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChessPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.oppo.ohacker.player.ChessPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ChessPosition* source =
      ::google::protobuf::DynamicCastToGenerated<ChessPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.oppo.ohacker.player.ChessPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.oppo.ohacker.player.ChessPosition)
    MergeFrom(*source);
  }
}

void ChessPosition::MergeFrom(const ChessPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.oppo.ohacker.player.ChessPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::com::oppo::ohacker::player::Position::MergeFrom(from.position());
  }
  if (from.has_chess()) {
    mutable_chess()->::com::oppo::ohacker::player::Chess::MergeFrom(from.chess());
  }
}

void ChessPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.oppo.ohacker.player.ChessPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChessPosition::CopyFrom(const ChessPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.oppo.ohacker.player.ChessPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChessPosition::IsInitialized() const {
  return true;
}

void ChessPosition::Swap(ChessPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChessPosition::InternalSwap(ChessPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(chess_, other->chess_);
}

::google::protobuf::Metadata ChessPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_player_2eproto);
  return ::file_level_metadata_player_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MoveRequest::InitAsDefaultInstance() {
}
class MoveRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveRequest::kChessPositionsFieldNumber;
const int MoveRequest::kIsFirstHandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveRequest::MoveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.oppo.ohacker.player.MoveRequest)
}
MoveRequest::MoveRequest(const MoveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      chesspositions_(from.chesspositions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isfirsthand_ = from.isfirsthand_;
  // @@protoc_insertion_point(copy_constructor:com.oppo.ohacker.player.MoveRequest)
}

void MoveRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MoveRequest_player_2eproto.base);
  isfirsthand_ = false;
}

MoveRequest::~MoveRequest() {
  // @@protoc_insertion_point(destructor:com.oppo.ohacker.player.MoveRequest)
  SharedDtor();
}

void MoveRequest::SharedDtor() {
}

void MoveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveRequest& MoveRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MoveRequest_player_2eproto.base);
  return *internal_default_instance();
}


void MoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.oppo.ohacker.player.MoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chesspositions_.Clear();
  isfirsthand_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MoveRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .com.oppo.ohacker.player.ChessPosition chessPositions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::oppo::ohacker::player::ChessPosition::_InternalParse;
          object = msg->add_chesspositions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // bool isFirstHand = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_isfirsthand(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.oppo.ohacker.player.MoveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.oppo.ohacker.player.ChessPosition chessPositions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chesspositions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isFirstHand = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirsthand_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.oppo.ohacker.player.MoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.oppo.ohacker.player.MoveRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.oppo.ohacker.player.MoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.oppo.ohacker.player.ChessPosition chessPositions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chesspositions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chesspositions(static_cast<int>(i)),
      output);
  }

  // bool isFirstHand = 2;
  if (this->isfirsthand() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfirsthand(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.oppo.ohacker.player.MoveRequest)
}

::google::protobuf::uint8* MoveRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.oppo.ohacker.player.MoveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.oppo.ohacker.player.ChessPosition chessPositions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chesspositions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chesspositions(static_cast<int>(i)), target);
  }

  // bool isFirstHand = 2;
  if (this->isfirsthand() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfirsthand(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.oppo.ohacker.player.MoveRequest)
  return target;
}

size_t MoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.oppo.ohacker.player.MoveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.oppo.ohacker.player.ChessPosition chessPositions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chesspositions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chesspositions(static_cast<int>(i)));
    }
  }

  // bool isFirstHand = 2;
  if (this->isfirsthand() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.oppo.ohacker.player.MoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveRequest* source =
      ::google::protobuf::DynamicCastToGenerated<MoveRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.oppo.ohacker.player.MoveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.oppo.ohacker.player.MoveRequest)
    MergeFrom(*source);
  }
}

void MoveRequest::MergeFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.oppo.ohacker.player.MoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chesspositions_.MergeFrom(from.chesspositions_);
  if (from.isfirsthand() != 0) {
    set_isfirsthand(from.isfirsthand());
  }
}

void MoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.oppo.ohacker.player.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveRequest::CopyFrom(const MoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.oppo.ohacker.player.MoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveRequest::IsInitialized() const {
  return true;
}

void MoveRequest::Swap(MoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveRequest::InternalSwap(MoveRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&chesspositions_)->InternalSwap(CastToBase(&other->chesspositions_));
  swap(isfirsthand_, other->isfirsthand_);
}

::google::protobuf::Metadata MoveRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_player_2eproto);
  return ::file_level_metadata_player_2eproto[kIndexInFileMessages];
}


// ===================================================================

void InitResponse::InitAsDefaultInstance() {
}
class InitResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitResponse::kChessPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitResponse::InitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.oppo.ohacker.player.InitResponse)
}
InitResponse::InitResponse(const InitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      chessposition_(from.chessposition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.oppo.ohacker.player.InitResponse)
}

void InitResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_InitResponse_player_2eproto.base);
}

InitResponse::~InitResponse() {
  // @@protoc_insertion_point(destructor:com.oppo.ohacker.player.InitResponse)
  SharedDtor();
}

void InitResponse::SharedDtor() {
}

void InitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitResponse& InitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_InitResponse_player_2eproto.base);
  return *internal_default_instance();
}


void InitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.oppo.ohacker.player.InitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chessposition_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<InitResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .com.oppo.ohacker.player.ChessPosition chessPosition = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::oppo::ohacker::player::ChessPosition::_InternalParse;
          object = msg->add_chessposition();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.oppo.ohacker.player.InitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.oppo.ohacker.player.ChessPosition chessPosition = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chessposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.oppo.ohacker.player.InitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.oppo.ohacker.player.InitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.oppo.ohacker.player.InitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.oppo.ohacker.player.ChessPosition chessPosition = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chessposition_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chessposition(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.oppo.ohacker.player.InitResponse)
}

::google::protobuf::uint8* InitResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.oppo.ohacker.player.InitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.oppo.ohacker.player.ChessPosition chessPosition = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chessposition_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chessposition(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.oppo.ohacker.player.InitResponse)
  return target;
}

size_t InitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.oppo.ohacker.player.InitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.oppo.ohacker.player.ChessPosition chessPosition = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chessposition_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chessposition(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.oppo.ohacker.player.InitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<InitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.oppo.ohacker.player.InitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.oppo.ohacker.player.InitResponse)
    MergeFrom(*source);
  }
}

void InitResponse::MergeFrom(const InitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.oppo.ohacker.player.InitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chessposition_.MergeFrom(from.chessposition_);
}

void InitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.oppo.ohacker.player.InitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitResponse::CopyFrom(const InitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.oppo.ohacker.player.InitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitResponse::IsInitialized() const {
  return true;
}

void InitResponse::Swap(InitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitResponse::InternalSwap(InitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&chessposition_)->InternalSwap(CastToBase(&other->chessposition_));
}

::google::protobuf::Metadata InitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_player_2eproto);
  return ::file_level_metadata_player_2eproto[kIndexInFileMessages];
}


// ===================================================================

void MoveResponse::InitAsDefaultInstance() {
}
class MoveResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveResponse::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveResponse::MoveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.oppo.ohacker.player.MoveResponse)
}
MoveResponse::MoveResponse(const MoveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      position_(from.position_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.oppo.ohacker.player.MoveResponse)
}

void MoveResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_MoveResponse_player_2eproto.base);
}

MoveResponse::~MoveResponse() {
  // @@protoc_insertion_point(destructor:com.oppo.ohacker.player.MoveResponse)
  SharedDtor();
}

void MoveResponse::SharedDtor() {
}

void MoveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MoveResponse& MoveResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_MoveResponse_player_2eproto.base);
  return *internal_default_instance();
}


void MoveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.oppo.ohacker.player.MoveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MoveResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<MoveResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .com.oppo.ohacker.player.Position position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::com::oppo::ohacker::player::Position::_InternalParse;
          object = msg->add_position();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.oppo.ohacker.player.MoveResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.oppo.ohacker.player.Position position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.oppo.ohacker.player.MoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.oppo.ohacker.player.MoveResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.oppo.ohacker.player.MoveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.oppo.ohacker.player.Position position = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->position(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.oppo.ohacker.player.MoveResponse)
}

::google::protobuf::uint8* MoveResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.oppo.ohacker.player.MoveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.oppo.ohacker.player.Position position = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->position_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->position(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.oppo.ohacker.player.MoveResponse)
  return target;
}

size_t MoveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.oppo.ohacker.player.MoveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.oppo.ohacker.player.Position position = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->position_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->position(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.oppo.ohacker.player.MoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveResponse* source =
      ::google::protobuf::DynamicCastToGenerated<MoveResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.oppo.ohacker.player.MoveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.oppo.ohacker.player.MoveResponse)
    MergeFrom(*source);
  }
}

void MoveResponse::MergeFrom(const MoveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.oppo.ohacker.player.MoveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_.MergeFrom(from.position_);
}

void MoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.oppo.ohacker.player.MoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveResponse::CopyFrom(const MoveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.oppo.ohacker.player.MoveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveResponse::IsInitialized() const {
  return true;
}

void MoveResponse::Swap(MoveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveResponse::InternalSwap(MoveResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&position_)->InternalSwap(CastToBase(&other->position_));
}

::google::protobuf::Metadata MoveResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_player_2eproto);
  return ::file_level_metadata_player_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace player
}  // namespace ohacker
}  // namespace oppo
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::oppo::ohacker::player::InitRequest* Arena::CreateMaybeMessage< ::com::oppo::ohacker::player::InitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::oppo::ohacker::player::InitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::oppo::ohacker::player::Chess* Arena::CreateMaybeMessage< ::com::oppo::ohacker::player::Chess >(Arena* arena) {
  return Arena::CreateInternal< ::com::oppo::ohacker::player::Chess >(arena);
}
template<> PROTOBUF_NOINLINE ::com::oppo::ohacker::player::Position* Arena::CreateMaybeMessage< ::com::oppo::ohacker::player::Position >(Arena* arena) {
  return Arena::CreateInternal< ::com::oppo::ohacker::player::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::com::oppo::ohacker::player::ChessPosition* Arena::CreateMaybeMessage< ::com::oppo::ohacker::player::ChessPosition >(Arena* arena) {
  return Arena::CreateInternal< ::com::oppo::ohacker::player::ChessPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::com::oppo::ohacker::player::MoveRequest* Arena::CreateMaybeMessage< ::com::oppo::ohacker::player::MoveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::oppo::ohacker::player::MoveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::oppo::ohacker::player::InitResponse* Arena::CreateMaybeMessage< ::com::oppo::ohacker::player::InitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::oppo::ohacker::player::InitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::oppo::ohacker::player::MoveResponse* Arena::CreateMaybeMessage< ::com::oppo::ohacker::player::MoveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::oppo::ohacker::player::MoveResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
