// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduler.proto

#include "scheduler.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace com {
namespace oppo {
namespace ohacker {
namespace scheduler {
class ReadyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadyRequest> _instance;
} _ReadyRequest_default_instance_;
class ReadyResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadyResponse> _instance;
} _ReadyResponse_default_instance_;
}  // namespace scheduler
}  // namespace ohacker
}  // namespace oppo
}  // namespace com
static void InitDefaultsReadyRequest_scheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::oppo::ohacker::scheduler::_ReadyRequest_default_instance_;
    new (ptr) ::com::oppo::ohacker::scheduler::ReadyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::oppo::ohacker::scheduler::ReadyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadyRequest_scheduler_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadyRequest_scheduler_2eproto}, {}};

static void InitDefaultsReadyResponse_scheduler_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::oppo::ohacker::scheduler::_ReadyResponse_default_instance_;
    new (ptr) ::com::oppo::ohacker::scheduler::ReadyResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::oppo::ohacker::scheduler::ReadyResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReadyResponse_scheduler_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReadyResponse_scheduler_2eproto}, {}};

void InitDefaults_scheduler_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReadyRequest_scheduler_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReadyResponse_scheduler_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_scheduler_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_scheduler_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_scheduler_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_scheduler_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::scheduler::ReadyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::scheduler::ReadyRequest, playerhost_),
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::scheduler::ReadyRequest, playerport_),
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::scheduler::ReadyRequest, matchid_),
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::scheduler::ReadyRequest, teamid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::scheduler::ReadyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::oppo::ohacker::scheduler::ReadyResponse, msg_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::oppo::ohacker::scheduler::ReadyRequest)},
  { 9, -1, sizeof(::com::oppo::ohacker::scheduler::ReadyResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::oppo::ohacker::scheduler::_ReadyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::com::oppo::ohacker::scheduler::_ReadyResponse_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_scheduler_2eproto = {
  {}, AddDescriptors_scheduler_2eproto, "scheduler.proto", schemas,
  file_default_instances, TableStruct_scheduler_2eproto::offsets,
  file_level_metadata_scheduler_2eproto, 2, file_level_enum_descriptors_scheduler_2eproto, file_level_service_descriptors_scheduler_2eproto,
};

const char descriptor_table_protodef_scheduler_2eproto[] =
  "\n\017scheduler.proto\022\032com.oppo.ohacker.sche"
  "duler\"W\n\014ReadyRequest\022\022\n\nplayerHost\030\001 \001("
  "\t\022\022\n\nplayerPort\030\002 \001(\005\022\017\n\007matchId\030\003 \001(\005\022\016"
  "\n\006teamId\030\004 \001(\005\"\034\n\rReadyResponse\022\013\n\003msg\030\001"
  " \001(\t2r\n\020SchedulerService\022^\n\005ready\022(.com."
  "oppo.ohacker.scheduler.ReadyRequest\032).co"
  "m.oppo.ohacker.scheduler.ReadyResponse\"\000"
  "B\002P\001b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_scheduler_2eproto = {
  false, InitDefaults_scheduler_2eproto, 
  descriptor_table_protodef_scheduler_2eproto,
  "scheduler.proto", &assign_descriptors_table_scheduler_2eproto, 292,
};

void AddDescriptors_scheduler_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_scheduler_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scheduler_2eproto = []() { AddDescriptors_scheduler_2eproto(); return true; }();
namespace com {
namespace oppo {
namespace ohacker {
namespace scheduler {

// ===================================================================

void ReadyRequest::InitAsDefaultInstance() {
}
class ReadyRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadyRequest::kPlayerHostFieldNumber;
const int ReadyRequest::kPlayerPortFieldNumber;
const int ReadyRequest::kMatchIdFieldNumber;
const int ReadyRequest::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyRequest::ReadyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.oppo.ohacker.scheduler.ReadyRequest)
}
ReadyRequest::ReadyRequest(const ReadyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerhost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.playerhost().size() > 0) {
    playerhost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerhost_);
  }
  ::memcpy(&playerport_, &from.playerport_,
    static_cast<size_t>(reinterpret_cast<char*>(&teamid_) -
    reinterpret_cast<char*>(&playerport_)) + sizeof(teamid_));
  // @@protoc_insertion_point(copy_constructor:com.oppo.ohacker.scheduler.ReadyRequest)
}

void ReadyRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReadyRequest_scheduler_2eproto.base);
  playerhost_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teamid_) -
      reinterpret_cast<char*>(&playerport_)) + sizeof(teamid_));
}

ReadyRequest::~ReadyRequest() {
  // @@protoc_insertion_point(destructor:com.oppo.ohacker.scheduler.ReadyRequest)
  SharedDtor();
}

void ReadyRequest::SharedDtor() {
  playerhost_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadyRequest& ReadyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReadyRequest_scheduler_2eproto.base);
  return *internal_default_instance();
}


void ReadyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:com.oppo.ohacker.scheduler.ReadyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  playerhost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teamid_) -
      reinterpret_cast<char*>(&playerport_)) + sizeof(teamid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadyRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReadyRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string playerHost = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.oppo.ohacker.scheduler.ReadyRequest.playerHost");
        object = msg->mutable_playerhost();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 playerPort = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_playerport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 matchId = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_matchid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 teamId = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_teamid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.oppo.ohacker.scheduler.ReadyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string playerHost = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playerhost()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->playerhost().data(), static_cast<int>(this->playerhost().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.oppo.ohacker.scheduler.ReadyRequest.playerHost"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerPort = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 matchId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 teamId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.oppo.ohacker.scheduler.ReadyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.oppo.ohacker.scheduler.ReadyRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.oppo.ohacker.scheduler.ReadyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerHost = 1;
  if (this->playerhost().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerhost().data(), static_cast<int>(this->playerhost().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.oppo.ohacker.scheduler.ReadyRequest.playerHost");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->playerhost(), output);
  }

  // int32 playerPort = 2;
  if (this->playerport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playerport(), output);
  }

  // int32 matchId = 3;
  if (this->matchid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->matchid(), output);
  }

  // int32 teamId = 4;
  if (this->teamid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->teamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.oppo.ohacker.scheduler.ReadyRequest)
}

::google::protobuf::uint8* ReadyRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.oppo.ohacker.scheduler.ReadyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string playerHost = 1;
  if (this->playerhost().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->playerhost().data(), static_cast<int>(this->playerhost().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.oppo.ohacker.scheduler.ReadyRequest.playerHost");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->playerhost(), target);
  }

  // int32 playerPort = 2;
  if (this->playerport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playerport(), target);
  }

  // int32 matchId = 3;
  if (this->matchid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->matchid(), target);
  }

  // int32 teamId = 4;
  if (this->teamid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->teamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.oppo.ohacker.scheduler.ReadyRequest)
  return target;
}

size_t ReadyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.oppo.ohacker.scheduler.ReadyRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string playerHost = 1;
  if (this->playerhost().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->playerhost());
  }

  // int32 playerPort = 2;
  if (this->playerport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerport());
  }

  // int32 matchId = 3;
  if (this->matchid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->matchid());
  }

  // int32 teamId = 4;
  if (this->teamid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->teamid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.oppo.ohacker.scheduler.ReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyRequest* source =
      ::google::protobuf::DynamicCastToGenerated<ReadyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.oppo.ohacker.scheduler.ReadyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.oppo.ohacker.scheduler.ReadyRequest)
    MergeFrom(*source);
  }
}

void ReadyRequest::MergeFrom(const ReadyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.oppo.ohacker.scheduler.ReadyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerhost().size() > 0) {

    playerhost_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.playerhost_);
  }
  if (from.playerport() != 0) {
    set_playerport(from.playerport());
  }
  if (from.matchid() != 0) {
    set_matchid(from.matchid());
  }
  if (from.teamid() != 0) {
    set_teamid(from.teamid());
  }
}

void ReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.oppo.ohacker.scheduler.ReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyRequest::CopyFrom(const ReadyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.oppo.ohacker.scheduler.ReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyRequest::IsInitialized() const {
  return true;
}

void ReadyRequest::Swap(ReadyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyRequest::InternalSwap(ReadyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  playerhost_.Swap(&other->playerhost_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerport_, other->playerport_);
  swap(matchid_, other->matchid_);
  swap(teamid_, other->teamid_);
}

::google::protobuf::Metadata ReadyRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_scheduler_2eproto);
  return ::file_level_metadata_scheduler_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReadyResponse::InitAsDefaultInstance() {
}
class ReadyResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadyResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadyResponse::ReadyResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.oppo.ohacker.scheduler.ReadyResponse)
}
ReadyResponse::ReadyResponse(const ReadyResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:com.oppo.ohacker.scheduler.ReadyResponse)
}

void ReadyResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReadyResponse_scheduler_2eproto.base);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReadyResponse::~ReadyResponse() {
  // @@protoc_insertion_point(destructor:com.oppo.ohacker.scheduler.ReadyResponse)
  SharedDtor();
}

void ReadyResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReadyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadyResponse& ReadyResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReadyResponse_scheduler_2eproto.base);
  return *internal_default_instance();
}


void ReadyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:com.oppo.ohacker.scheduler.ReadyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReadyResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReadyResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string msg = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("com.oppo.ohacker.scheduler.ReadyResponse.msg");
        object = msg->mutable_msg();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.oppo.ohacker.scheduler.ReadyResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string msg = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), static_cast<int>(this->msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "com.oppo.ohacker.scheduler.ReadyResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.oppo.ohacker.scheduler.ReadyResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.oppo.ohacker.scheduler.ReadyResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.oppo.ohacker.scheduler.ReadyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.oppo.ohacker.scheduler.ReadyResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.oppo.ohacker.scheduler.ReadyResponse)
}

::google::protobuf::uint8* ReadyResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.oppo.ohacker.scheduler.ReadyResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), static_cast<int>(this->msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "com.oppo.ohacker.scheduler.ReadyResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.oppo.ohacker.scheduler.ReadyResponse)
  return target;
}

size_t ReadyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.oppo.ohacker.scheduler.ReadyResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.oppo.ohacker.scheduler.ReadyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyResponse* source =
      ::google::protobuf::DynamicCastToGenerated<ReadyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.oppo.ohacker.scheduler.ReadyResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.oppo.ohacker.scheduler.ReadyResponse)
    MergeFrom(*source);
  }
}

void ReadyResponse::MergeFrom(const ReadyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.oppo.ohacker.scheduler.ReadyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void ReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.oppo.ohacker.scheduler.ReadyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyResponse::CopyFrom(const ReadyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.oppo.ohacker.scheduler.ReadyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyResponse::IsInitialized() const {
  return true;
}

void ReadyResponse::Swap(ReadyResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadyResponse::InternalSwap(ReadyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ReadyResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_scheduler_2eproto);
  return ::file_level_metadata_scheduler_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace scheduler
}  // namespace ohacker
}  // namespace oppo
}  // namespace com
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::com::oppo::ohacker::scheduler::ReadyRequest* Arena::CreateMaybeMessage< ::com::oppo::ohacker::scheduler::ReadyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::com::oppo::ohacker::scheduler::ReadyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::com::oppo::ohacker::scheduler::ReadyResponse* Arena::CreateMaybeMessage< ::com::oppo::ohacker::scheduler::ReadyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::com::oppo::ohacker::scheduler::ReadyResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
