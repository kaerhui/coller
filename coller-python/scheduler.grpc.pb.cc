// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: scheduler.proto

#include "scheduler.pb.h"
#include "scheduler.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace oppo {
namespace ohacker {
namespace scheduler {

static const char* SchedulerService_method_names[] = {
  "/com.oppo.ohacker.scheduler.SchedulerService/ready",
};

std::unique_ptr< SchedulerService::Stub> SchedulerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SchedulerService::Stub> stub(new SchedulerService::Stub(channel));
  return stub;
}

SchedulerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ready_(SchedulerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SchedulerService::Stub::ready(::grpc::ClientContext* context, const ::com::oppo::ohacker::scheduler::ReadyRequest& request, ::com::oppo::ohacker::scheduler::ReadyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ready_, context, request, response);
}

void SchedulerService::Stub::experimental_async::ready(::grpc::ClientContext* context, const ::com::oppo::ohacker::scheduler::ReadyRequest* request, ::com::oppo::ohacker::scheduler::ReadyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ready_, context, request, response, std::move(f));
}

void SchedulerService::Stub::experimental_async::ready(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::com::oppo::ohacker::scheduler::ReadyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ready_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::com::oppo::ohacker::scheduler::ReadyResponse>* SchedulerService::Stub::AsyncreadyRaw(::grpc::ClientContext* context, const ::com::oppo::ohacker::scheduler::ReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::com::oppo::ohacker::scheduler::ReadyResponse>::Create(channel_.get(), cq, rpcmethod_ready_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::com::oppo::ohacker::scheduler::ReadyResponse>* SchedulerService::Stub::PrepareAsyncreadyRaw(::grpc::ClientContext* context, const ::com::oppo::ohacker::scheduler::ReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::com::oppo::ohacker::scheduler::ReadyResponse>::Create(channel_.get(), cq, rpcmethod_ready_, context, request, false);
}

SchedulerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SchedulerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SchedulerService::Service, ::com::oppo::ohacker::scheduler::ReadyRequest, ::com::oppo::ohacker::scheduler::ReadyResponse>(
          std::mem_fn(&SchedulerService::Service::ready), this)));
}

SchedulerService::Service::~Service() {
}

::grpc::Status SchedulerService::Service::ready(::grpc::ServerContext* context, const ::com::oppo::ohacker::scheduler::ReadyRequest* request, ::com::oppo::ohacker::scheduler::ReadyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace oppo
}  // namespace ohacker
}  // namespace scheduler

