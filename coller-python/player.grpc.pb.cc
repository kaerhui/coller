// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: player.proto

#include "player.pb.h"
#include "player.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace com {
namespace oppo {
namespace ohacker {
namespace player {

static const char* PlayerService_method_names[] = {
  "/com.oppo.ohacker.player.PlayerService/initChessBoard",
  "/com.oppo.ohacker.player.PlayerService/move",
};

std::unique_ptr< PlayerService::Stub> PlayerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PlayerService::Stub> stub(new PlayerService::Stub(channel));
  return stub;
}

PlayerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_initChessBoard_(PlayerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_move_(PlayerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PlayerService::Stub::initChessBoard(::grpc::ClientContext* context, const ::com::oppo::ohacker::player::InitRequest& request, ::com::oppo::ohacker::player::InitResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_initChessBoard_, context, request, response);
}

void PlayerService::Stub::experimental_async::initChessBoard(::grpc::ClientContext* context, const ::com::oppo::ohacker::player::InitRequest* request, ::com::oppo::ohacker::player::InitResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_initChessBoard_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::initChessBoard(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::com::oppo::ohacker::player::InitResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_initChessBoard_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::com::oppo::ohacker::player::InitResponse>* PlayerService::Stub::AsyncinitChessBoardRaw(::grpc::ClientContext* context, const ::com::oppo::ohacker::player::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::com::oppo::ohacker::player::InitResponse>::Create(channel_.get(), cq, rpcmethod_initChessBoard_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::com::oppo::ohacker::player::InitResponse>* PlayerService::Stub::PrepareAsyncinitChessBoardRaw(::grpc::ClientContext* context, const ::com::oppo::ohacker::player::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::com::oppo::ohacker::player::InitResponse>::Create(channel_.get(), cq, rpcmethod_initChessBoard_, context, request, false);
}

::grpc::Status PlayerService::Stub::move(::grpc::ClientContext* context, const ::com::oppo::ohacker::player::MoveRequest& request, ::com::oppo::ohacker::player::MoveResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_move_, context, request, response);
}

void PlayerService::Stub::experimental_async::move(::grpc::ClientContext* context, const ::com::oppo::ohacker::player::MoveRequest* request, ::com::oppo::ohacker::player::MoveResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_move_, context, request, response, std::move(f));
}

void PlayerService::Stub::experimental_async::move(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::com::oppo::ohacker::player::MoveResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_move_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::com::oppo::ohacker::player::MoveResponse>* PlayerService::Stub::AsyncmoveRaw(::grpc::ClientContext* context, const ::com::oppo::ohacker::player::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::com::oppo::ohacker::player::MoveResponse>::Create(channel_.get(), cq, rpcmethod_move_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::com::oppo::ohacker::player::MoveResponse>* PlayerService::Stub::PrepareAsyncmoveRaw(::grpc::ClientContext* context, const ::com::oppo::ohacker::player::MoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::com::oppo::ohacker::player::MoveResponse>::Create(channel_.get(), cq, rpcmethod_move_, context, request, false);
}

PlayerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::com::oppo::ohacker::player::InitRequest, ::com::oppo::ohacker::player::InitResponse>(
          std::mem_fn(&PlayerService::Service::initChessBoard), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PlayerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PlayerService::Service, ::com::oppo::ohacker::player::MoveRequest, ::com::oppo::ohacker::player::MoveResponse>(
          std::mem_fn(&PlayerService::Service::move), this)));
}

PlayerService::Service::~Service() {
}

::grpc::Status PlayerService::Service::initChessBoard(::grpc::ServerContext* context, const ::com::oppo::ohacker::player::InitRequest* request, ::com::oppo::ohacker::player::InitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PlayerService::Service::move(::grpc::ServerContext* context, const ::com::oppo::ohacker::player::MoveRequest* request, ::com::oppo::ohacker::player::MoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace com
}  // namespace oppo
}  // namespace ohacker
}  // namespace player

