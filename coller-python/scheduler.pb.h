// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scheduler.proto

#ifndef PROTOBUF_INCLUDED_scheduler_2eproto
#define PROTOBUF_INCLUDED_scheduler_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scheduler_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_scheduler_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_scheduler_2eproto();
namespace com {
namespace oppo {
namespace ohacker {
namespace scheduler {
class ReadyRequest;
class ReadyRequestDefaultTypeInternal;
extern ReadyRequestDefaultTypeInternal _ReadyRequest_default_instance_;
class ReadyResponse;
class ReadyResponseDefaultTypeInternal;
extern ReadyResponseDefaultTypeInternal _ReadyResponse_default_instance_;
}  // namespace scheduler
}  // namespace ohacker
}  // namespace oppo
}  // namespace com
namespace google {
namespace protobuf {
template<> ::com::oppo::ohacker::scheduler::ReadyRequest* Arena::CreateMaybeMessage<::com::oppo::ohacker::scheduler::ReadyRequest>(Arena*);
template<> ::com::oppo::ohacker::scheduler::ReadyResponse* Arena::CreateMaybeMessage<::com::oppo::ohacker::scheduler::ReadyResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace com {
namespace oppo {
namespace ohacker {
namespace scheduler {

// ===================================================================

class ReadyRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.oppo.ohacker.scheduler.ReadyRequest) */ {
 public:
  ReadyRequest();
  virtual ~ReadyRequest();

  ReadyRequest(const ReadyRequest& from);

  inline ReadyRequest& operator=(const ReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadyRequest(ReadyRequest&& from) noexcept
    : ReadyRequest() {
    *this = ::std::move(from);
  }

  inline ReadyRequest& operator=(ReadyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReadyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadyRequest* internal_default_instance() {
    return reinterpret_cast<const ReadyRequest*>(
               &_ReadyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReadyRequest* other);
  friend void swap(ReadyRequest& a, ReadyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadyRequest* New() const final {
    return CreateMaybeMessage<ReadyRequest>(nullptr);
  }

  ReadyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadyRequest& from);
  void MergeFrom(const ReadyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string playerHost = 1;
  void clear_playerhost();
  static const int kPlayerHostFieldNumber = 1;
  const ::std::string& playerhost() const;
  void set_playerhost(const ::std::string& value);
  #if LANG_CXX11
  void set_playerhost(::std::string&& value);
  #endif
  void set_playerhost(const char* value);
  void set_playerhost(const char* value, size_t size);
  ::std::string* mutable_playerhost();
  ::std::string* release_playerhost();
  void set_allocated_playerhost(::std::string* playerhost);

  // int32 playerPort = 2;
  void clear_playerport();
  static const int kPlayerPortFieldNumber = 2;
  ::google::protobuf::int32 playerport() const;
  void set_playerport(::google::protobuf::int32 value);

  // int32 matchId = 3;
  void clear_matchid();
  static const int kMatchIdFieldNumber = 3;
  ::google::protobuf::int32 matchid() const;
  void set_matchid(::google::protobuf::int32 value);

  // int32 teamId = 4;
  void clear_teamid();
  static const int kTeamIdFieldNumber = 4;
  ::google::protobuf::int32 teamid() const;
  void set_teamid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.oppo.ohacker.scheduler.ReadyRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerhost_;
  ::google::protobuf::int32 playerport_;
  ::google::protobuf::int32 matchid_;
  ::google::protobuf::int32 teamid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scheduler_2eproto;
};
// -------------------------------------------------------------------

class ReadyResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.oppo.ohacker.scheduler.ReadyResponse) */ {
 public:
  ReadyResponse();
  virtual ~ReadyResponse();

  ReadyResponse(const ReadyResponse& from);

  inline ReadyResponse& operator=(const ReadyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReadyResponse(ReadyResponse&& from) noexcept
    : ReadyResponse() {
    *this = ::std::move(from);
  }

  inline ReadyResponse& operator=(ReadyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReadyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadyResponse* internal_default_instance() {
    return reinterpret_cast<const ReadyResponse*>(
               &_ReadyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ReadyResponse* other);
  friend void swap(ReadyResponse& a, ReadyResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReadyResponse* New() const final {
    return CreateMaybeMessage<ReadyResponse>(nullptr);
  }

  ReadyResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReadyResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReadyResponse& from);
  void MergeFrom(const ReadyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string msg = 1;
  void clear_msg();
  static const int kMsgFieldNumber = 1;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:com.oppo.ohacker.scheduler.ReadyResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scheduler_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadyRequest

// string playerHost = 1;
inline void ReadyRequest::clear_playerhost() {
  playerhost_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadyRequest::playerhost() const {
  // @@protoc_insertion_point(field_get:com.oppo.ohacker.scheduler.ReadyRequest.playerHost)
  return playerhost_.GetNoArena();
}
inline void ReadyRequest::set_playerhost(const ::std::string& value) {
  
  playerhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.oppo.ohacker.scheduler.ReadyRequest.playerHost)
}
#if LANG_CXX11
inline void ReadyRequest::set_playerhost(::std::string&& value) {
  
  playerhost_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.oppo.ohacker.scheduler.ReadyRequest.playerHost)
}
#endif
inline void ReadyRequest::set_playerhost(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  playerhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.oppo.ohacker.scheduler.ReadyRequest.playerHost)
}
inline void ReadyRequest::set_playerhost(const char* value, size_t size) {
  
  playerhost_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.oppo.ohacker.scheduler.ReadyRequest.playerHost)
}
inline ::std::string* ReadyRequest::mutable_playerhost() {
  
  // @@protoc_insertion_point(field_mutable:com.oppo.ohacker.scheduler.ReadyRequest.playerHost)
  return playerhost_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadyRequest::release_playerhost() {
  // @@protoc_insertion_point(field_release:com.oppo.ohacker.scheduler.ReadyRequest.playerHost)
  
  return playerhost_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadyRequest::set_allocated_playerhost(::std::string* playerhost) {
  if (playerhost != nullptr) {
    
  } else {
    
  }
  playerhost_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerhost);
  // @@protoc_insertion_point(field_set_allocated:com.oppo.ohacker.scheduler.ReadyRequest.playerHost)
}

// int32 playerPort = 2;
inline void ReadyRequest::clear_playerport() {
  playerport_ = 0;
}
inline ::google::protobuf::int32 ReadyRequest::playerport() const {
  // @@protoc_insertion_point(field_get:com.oppo.ohacker.scheduler.ReadyRequest.playerPort)
  return playerport_;
}
inline void ReadyRequest::set_playerport(::google::protobuf::int32 value) {
  
  playerport_ = value;
  // @@protoc_insertion_point(field_set:com.oppo.ohacker.scheduler.ReadyRequest.playerPort)
}

// int32 matchId = 3;
inline void ReadyRequest::clear_matchid() {
  matchid_ = 0;
}
inline ::google::protobuf::int32 ReadyRequest::matchid() const {
  // @@protoc_insertion_point(field_get:com.oppo.ohacker.scheduler.ReadyRequest.matchId)
  return matchid_;
}
inline void ReadyRequest::set_matchid(::google::protobuf::int32 value) {
  
  matchid_ = value;
  // @@protoc_insertion_point(field_set:com.oppo.ohacker.scheduler.ReadyRequest.matchId)
}

// int32 teamId = 4;
inline void ReadyRequest::clear_teamid() {
  teamid_ = 0;
}
inline ::google::protobuf::int32 ReadyRequest::teamid() const {
  // @@protoc_insertion_point(field_get:com.oppo.ohacker.scheduler.ReadyRequest.teamId)
  return teamid_;
}
inline void ReadyRequest::set_teamid(::google::protobuf::int32 value) {
  
  teamid_ = value;
  // @@protoc_insertion_point(field_set:com.oppo.ohacker.scheduler.ReadyRequest.teamId)
}

// -------------------------------------------------------------------

// ReadyResponse

// string msg = 1;
inline void ReadyResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadyResponse::msg() const {
  // @@protoc_insertion_point(field_get:com.oppo.ohacker.scheduler.ReadyResponse.msg)
  return msg_.GetNoArena();
}
inline void ReadyResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.oppo.ohacker.scheduler.ReadyResponse.msg)
}
#if LANG_CXX11
inline void ReadyResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:com.oppo.ohacker.scheduler.ReadyResponse.msg)
}
#endif
inline void ReadyResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.oppo.ohacker.scheduler.ReadyResponse.msg)
}
inline void ReadyResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.oppo.ohacker.scheduler.ReadyResponse.msg)
}
inline ::std::string* ReadyResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:com.oppo.ohacker.scheduler.ReadyResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadyResponse::release_msg() {
  // @@protoc_insertion_point(field_release:com.oppo.ohacker.scheduler.ReadyResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadyResponse::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:com.oppo.ohacker.scheduler.ReadyResponse.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace scheduler
}  // namespace ohacker
}  // namespace oppo
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_scheduler_2eproto
